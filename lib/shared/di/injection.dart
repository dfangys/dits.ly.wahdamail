import 'dart:io' as io;
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'injection.config.dart';

// P2 messaging facade binding
import 'package:wahda_bank/features/messaging/application/facade/messaging_facade.dart';
import 'package:wahda_bank/features/messaging/infrastructure/facade/ddd_mail_service_impl.dart';
import 'package:wahda_bank/features/messaging/infrastructure/facade/legacy_messaging_facade.dart';
import 'package:wahda_bank/services/feature_flags.dart';
import 'package:wahda_bank/features/sync/infrastructure/sync_scheduler.dart';
import 'package:wahda_bank/shared/flags/remote_flags.dart';
import 'package:wahda_bank/features/sync/infrastructure/bg_fetch_ios.dart';
import 'package:wahda_bank/features/sync/infrastructure/connectivity_monitor.dart';

final GetIt getIt = GetIt.instance;

@InjectableInit(
  initializerName: 'init',
  preferRelativeImports: true,
  asExtension: false,
)
Future<void> configureDependencies({String env = Environment.dev}) async {
  // init() is generated by injectable and is synchronous; keeping this method async allows callers to `await` it safely.
  init(getIt, environment: env);

  // Bind facade behind flag without flipping it.
  if (!getIt.isRegistered<MessagingFacade>()) {
    if (FeatureFlags.instance.dddMessagingEnabled) {
      getIt.registerLazySingleton<MessagingFacade>(
        () => getIt<DddMailServiceImpl>(),
      );
    } else {
      getIt.registerLazySingleton<MessagingFacade>(
        () => getIt<LegacyMessagingFacade>(),
      );
    }
  }

  // Kick off non-blocking remote flags load.
  try {
    if (getIt.isRegistered<RemoteFlags>()) {
      // ignore: discarded_futures
      getIt<RemoteFlags>().load();
    }
  } catch (_) {}

  // P5: Start sync in shadow mode only if explicitly enabled and DDD messaging is off.
  final ff = FeatureFlags.instance;
  if (ff.dddSyncShadowMode && !ff.dddMessagingEnabled) {
    // Use stored email as accountId; monitor INBOX only in P5.
    try {
      final scheduler = getIt<SyncScheduler>();
      await scheduler.startShadow(
        accountId: 'default-account',
        folderId: 'INBOX',
      );
    } catch (_) {
      // Do not crash DI on sync start failure in shadow mode.
    }
  }

  // P14: iOS background fetch fallback + connectivity monitor (flags OFF by default)
  try {
    if (io.Platform.isIOS &&
        ff.dddIosBgFetchEnabled &&
        !ff.dddKillSwitchEnabled) {
      // Start connectivity monitor (debounced single refresh on regain)
      getIt.get<ConnectivityMonitor>().start();
      // Schedule BG fetch (idempotent)
      getIt.get<BgFetchIos>().start();
    }
  } catch (_) {}
}
